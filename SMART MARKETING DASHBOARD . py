import pandas as pd
import matplotlib.pyplot as plt
from flask import Flask, render_template
import schedule
import time

# --- 1. Flask App Setup ---
app = Flask(__name__)

# --- 2. Sample Data (You can replace this with real data from your campaigns) ---
data = {
    'Campaign': ['Email', 'Social Media', 'SEO', 'PPC'],
    'Conversions': [120, 150, 80, 200],
    'Spend ($)': [500, 600, 400, 1000]
}
df = pd.DataFrame(data)

# --- 3. Data Analysis: Add calculated columns ---
df['CPC'] = df['Spend ($)'] / df['Conversions']  # Cost per Conversion (CPC)

# --- 4. Visualize Data ---
def generate_analytics_report():
    df.plot(kind='bar', x='Campaign', y='Conversions', title="Campaign Conversion Rates")
    plt.xlabel('Campaign')
    plt.ylabel('Conversions')
    plt.tight_layout()
    plt.savefig('static/conversion_report.png')  # Save the chart for web display

# --- 5. Flask Routes ---
@app.route('/')
def dashboard():
    # Generate report (run every time the dashboard is visited)
    generate_analytics_report()
    return render_template('dashboard.html', tables=[df.to_html(classes='data')], titles=df.columns.values)

@app.route('/analytics')
def analytics():
    # Display the saved analytics image
    return render_template('analytics.html')

# --- 6. Schedule Reports (Example of scheduling tasks) ---
def schedule_reports():
    # Scheduling analytics report generation every day at 10:00 AM
    schedule.every().day.at("10:00").do(generate_analytics_report)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    # Run the scheduled tasks in a separate thread (you can add threading to make it work in the background)
    import threading
    threading.Thread(target=schedule_reports).start()
    app.run(debug=True)
